{
  "0" : "Given an array of integers, return indices of the two numbers\n such that they add up to a specific target.\n\nYou may assume that each input would have exactly one \nsolution, and you may not use the same element twice.\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].",
  "1" : "Given a 32-bit signed integer, reverse digits of an integer.\n\nExample 1:\n\nInput: 123\nOutput: 321\nExample 2:\n\nInput: -123\nOutput: -321\nExample 3:\n\nInput: 120\nOutput: 21\nNote:\nAssume we are dealing with an environment which could only\n store integers within the 32-bit signed integer range: [−231,  231 − 1].\n For the purpose of this problem, assume that your\n function returns 0 when the reversed integer overflows.",
  "2" : "Determine whether an integer is a palindrome. An integer\n is a palindrome when it reads the same backward as forward.\n\nExample 1:\n\nInput: 121\nOutput: true\nExample 2:\n\nInput: -121\nOutput: false\nExplanation: From left to right, it reads -121.\n From right to left, it becomes 121-.\n Therefore it is not a palindrome.\nExample 3:\n\nInput: 10\nOutput: false\nExplanation: Reads 01 from right to left.\n Therefore it is not a palindrome.\nFollow up:\n\nCoud you solve it without converting\n the integer to a string?",
  "3" : "Given a valid (IPv4) IP address, return a defanged\n version of that IP address.\n\nA defanged IP address\n replaces every period \".\" with \"[.]\".\n\n \n\nExample 1:\n\nInput: address = \"1.1.1.1\"\nOutput: \"1[.]1[.]1[.]1\"\nExample 2:\n\nInput: address = \"255.100.50.0\"\nOutput: \"255[.]100[.]50[.]0\"\n \n\nConstraints:\n\nThe given address is a valid IPv4 address."
}